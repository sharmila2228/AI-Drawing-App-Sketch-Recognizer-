import tkinter as tk
from PIL import ImageGrab, Image
import numpy as np
import tensorflow as tf

# Load pre-trained model (digit recognizer based on MNIST)
model = tf.keras.models.load_model('mnist_model.h5')  # Replace with your model path

def predict_digit(img):
    # Resize image to 28x28 pixels
    img = img.resize((28, 28)).convert('L')
    img = np.array(img)
    img = 255 - img  # Invert colors
    img = img / 255.0
    img = img.reshape(1, 28, 28, 1)
    prediction = model.predict(img)
    return np.argmax(prediction)

def draw(event):
    x1, y1 = (event.x - 10), (event.y - 10)
    x2, y2 = (event.x + 10), (event.y + 10)
    canvas.create_oval(x1, y1, x2, y2, fill='black')

def predict():
    x = root.winfo_rootx() + canvas.winfo_x()
    y = root.winfo_rooty() + canvas.winfo_y()
    x1 = x + canvas.winfo_width()
    y1 = y + canvas.winfo_height()
    img = ImageGrab.grab().crop((x, y, x1, y1))
    digit = predict_digit(img)
    result_label.config(text=f'Predicted: {digit}')

def clear_canvas():
    canvas.delete('all')
    result_label.config(text='Draw a digit (0-9)')

# GUI setup
root = tk.Tk()
root.title("AI Sketch Recognizer")

canvas = tk.Canvas(root, width=200, height=200, bg='white')
canvas.pack()
canvas.bind('<B1-Motion>', draw)

btn_predict = tk.Button(root, text='Predict', command=predict)
btn_predict.pack()

btn_clear = tk.Button(root, text='Clear', command=clear_canvas)
btn_clear.pack()

result_label = tk.Label(root, text='Draw a digit (0-9)')
result_label.pack()

root.mainloop()
